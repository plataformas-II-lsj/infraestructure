name: Deploy Infrastructure and Kubernetes Resources to Main

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID:       ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET:   ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
    defaults:
      run:
        working-directory: terraform/
    outputs:
      acr_login_server: ${{ steps.export_outputs.outputs.acr_login_server }}
      key_vault_uri:    ${{ steps.export_outputs.outputs.key_vault_uri }}
      kube_config_b64:  ${{ steps.export_outputs.outputs.kube_config_b64 }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.8.3"
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve

      - name: Export Terraform Outputs
        id: export_outputs
        run: |
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "key_vault_uri=$(terraform output -raw key_vault_uri)" >> $GITHUB_OUTPUT
          echo "kube_config_b64=$(terraform output -raw kube_config_b64)" >> $GITHUB_OUTPUT

  deploy_k8s:
    runs-on: ubuntu-latest
    needs: deploy_infra
    environment: production
    defaults:
      run:
        working-directory: k8s/
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'

      - name: Configure kubectl using Terraform Output
        env:
          KUBE_CONFIG_B64: ${{ needs.deploy_infra.outputs.kube_config_b64 }}
        run: |
          echo "Configuring kubectl..."
          mkdir -p ${HOME}/.kube
          echo "${KUBE_CONFIG_B64}" | base64 -d > ${HOME}/.kube/config
          chmod 600 ${HOME}/.kube/config
          echo "KUBECONFIG=${HOME}/.kube/config" >> $GITHUB_ENV

          echo "Kubectl contexts:"  
          kubectl config get-contexts  
          echo "Current context:"  
          kubectl config current-context

      - name: Prefix images with ACR_LOGIN_SERVER
        env:
          ACR_SERVER: ${{ needs.deploy_infra.outputs.acr_login_server }}
        run: |
          echo "→ Prefijando imágenes con: $ACR_SERVER"
          for f in deployments/*.yaml; do
            sed -E -i "s#image:\s*([a-zA-Z0-9._/-]+):([a-zA-Z0-9._-]+)#image: $ACR_SERVER/\1:\2#g" "$f"
          done

      - name: kubectl Apply - Deployments
        run: kubectl apply -f deployments/

      - name: kubectl Apply - HPA
        run: kubectl apply -f hpa/

      - name: kubectl Apply - Services
        run: kubectl apply -f services/

      - name: kubectl Apply - IngressController
        run: kubectl apply -f controller/

      - name: Wait for Ingress Controller to be ready
        run: |
          echo "Waiting for Ingress Controller to be ready..."
          kubectl wait --for=condition=available --timeout=600s deployment/ingress-nginx-controller -n ingress-nginx
          kubectl wait --for=condition=complete --timeout=300s job/ingress-nginx-admission-create -n ingress-nginx
          kubectl wait --for=condition=complete --timeout=300s job/ingress-nginx-admission-patch -n ingress-nginx
          echo "Ingress Controller is ready."

      - name: Wait for Admission Webhook to respond
        run: |
          echo "Waiting for webhook admission endpoint to respond..."
          ATTEMPTS=30
          SLEEP=5
          for i in $(seq 1 $ATTEMPTS); do
            echo "Attempt $i/$ATTEMPTS"
            if kubectl run tmp-check --rm -i --restart=Never --image=curlimages/curl:8.4.0 \
              -n ingress-nginx -- curl -ks https://ingress-nginx-controller-admission.ingress-nginx.svc:443; then
              echo "✅ Webhook is responding!"
              break
            else
              echo "❌ Not ready yet. Retrying in $SLEEP seconds..."
              sleep $SLEEP
            fi
          done

      - name: kubectl Apply - Ingress
        run: kubectl apply -f ingress/

      - name: kubectl Apply - Policies
        run: kubectl apply -f policies/