name: Deploy Infrastructure and Kubernetes Base Config

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  TF_VAR_location:           ${{ secrets.TF_LOCATION }}
  TF_VAR_resource_group_name: ${{ secrets.TF_RG_NAME }}
  TF_VAR_aks_cluster_name:   ${{ secrets.TF_AKS_CLUSTER_NAME }}
  TF_VAR_acr_name:           ${{ secrets.TF_ACR_NAME }}
  TF_VAR_key_vault_name:     ${{ secrets.TF_KEYVAULT_NAME }}
  TF_VAR_jwt_secret:         ${{ secrets.TF_JWT_SECRET }}

jobs:
  deploy_infra:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.8.3"
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform/
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/
        id: plan
        run: terraform plan -no-color

      - name: Terraform Apply
        working-directory: terraform/
        id: apply
        run: terraform apply -auto-approve -no-color

      - name: Export Terraform Outputs
        working-directory: terraform/
        id: terraform_outputs
        run: |

          terraform output -raw kube_config_b64 > kube_config.b64
          echo "ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)" > tf_outputs.env
          echo "KEY_VAULT_NAME=$(terraform output -raw key_vault_name)" >> tf_outputs.env
          echo "RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)" >> tf_outputs.env
          echo "AKS_CLUSTER_NAME=$(terraform output -raw aks_cluster_name)" >> tf_outputs.env
          echo "ACR_NAME=$(terraform output -raw acr_name)" >> tf_outputs.env
          echo "JWT_SECRET_VALUE=$(terraform output -raw jwt_secret_value)" >> tf_outputs.env
          echo "tf_outputs.env file created."

      - name: Upload Kubeconfig Artifact
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: terraform/kube_config.b64
          retention-days: 1
          overwrite: true

      - name: Upload Terraform Outputs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: terraform/tf_outputs.env
          retention-days: 1
          overwrite: true
      
  deploy_k8s:
    runs-on: ubuntu-latest
    needs: deploy_infra

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Download Kubeconfig Artifact
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube

      - name: Download Terraform Outputs Artifact
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs
          path: .

      - name: Configure kubectl
        run: |
          echo "Configuring kubectl..."

          KUBECONFIG_FILE="${HOME}/.kube/kube_config.b64"

          if [ ! -f "$KUBECONFIG_FILE" ]; then
            echo "::error::Kubeconfig artifact file not found at $KUBECONFIG_FILE."
            exit 1
          fi

          base64 -d "$KUBECONFIG_FILE" > ${HOME}/.kube/config
          if [ $? -ne 0 ]; then
            echo "::error::Failed to base64 decode kubeconfig artifact. Is the file valid base64?"
            exit 1
          fi

          chmod 600 ${HOME}/.kube/config
          echo "KUBECONFIG=${HOME}/.kube/config" >> $GITHUB_ENV

          echo "Validating kubectl config..."
          kubectl config get-contexts
          if [ $? -ne 0 ]; then
            echo "::error::kubectl config get-contexts failed. Kubeconfig might be invalid."
            exit 1
          fi
          kubectl config current-context
          echo "kubectl configured successfully."


      - name: Substitute Env Variables in K8s Manifests
        env:
          TENANT_ID:        ${{ env.ARM_TENANT_ID }}
        working-directory: k8s/
        run: |
          echo "Substituting variables..."

          if [ -f ../tf_outputs.env ]; then
            source ../tf_outputs.env
            echo "Variables loaded from ../tf_outputs.env"
            echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER"
            echo "KEY_VAULT_NAME=$KEY_VAULT_NAME"
          else
            echo "::error::tf_outputs.env file not found in the job root directory."
            exit 1
          fi

          find deployments/ -type f -name '*.yaml' ! -path 'deployments/zipkin-deployment.yaml' -exec sed -i -E "s#image:\s*([a-zA-Z0-9._/-]+):([a-zA-Z0-9._-]+)#image: ${ACR_LOGIN_SERVER}/\1:\2#g" {} +
          echo "Image names prefixed with ${ACR_LOGIN_SERVER}/"

      - name: Create Kubernetes Secret from TF Output
        run: |
          if [ -z "$JWT_SECRET_VALUE" ]; then
            echo "::error::JWT_SECRET_VALUE is empty. Cannot create secret."
            exit 1
          fi

          echo "Creating or updating Kubernetes secret 'app-secrets'..."
          kubectl create secret generic app-secrets \
            --from-literal=JWT_SECRET="$JWT_SECRET_VALUE" \
            --dry-run=client -o yaml | kubectl apply -f -

          echo "Kubernetes secret 'app-secrets' created/updated successfully."

      - name: Apply Kubernetes Manifests
        working-directory: k8s/
        run: |
          kubectl apply -f deployments/
          kubectl apply -f statefulsets/
          kubectl apply -f services/
          kubectl apply -f hpa/
          kubectl apply -f controller/

          echo "Waiting for Ingress Controller to be ready..."
          # NOTA: Asegúrate que el namespace (-n ingress-nginx) es correcto
          kubectl wait --for=condition=available --timeout=600s deployment/ingress-nginx-controller -n ingress-nginx || echo "WARN: Ingress controller deployment timed out"
          kubectl wait --for=condition=complete --timeout=300s job/ingress-nginx-admission-create -n ingress-nginx || echo "WARN: Ingress admission create job timed out"
          kubectl wait --for=condition=complete --timeout=300s job/ingress-nginx-admission-patch -n ingress-nginx || echo "WARN: Ingress admission patch job timed out"
          echo "Ingress Controller is ready."

          echo "Waiting for webhook admission endpoint to respond..."
          ATTEMPTS=30
          SLEEP=5
          set +e
          for i in $(seq 1 $ATTEMPTS); do
            echo "Attempt $i/$ATTEMPTS"
            kubectl run curl-check-webhook --rm -i --restart=Never --image=curlimages/curl:latest \
              -n ingress-nginx -- curl --silent --max-time 5 -kv https://ingress-nginx-controller-admission.ingress-nginx.svc:443/
            exit_code=$?
            if [ "$exit_code" -eq 0 ] || [ "$exit_code" -eq 22 ]; then
              echo "✅ Webhook is responding (curl exit code: $exit_code)!"
              break
            else
              echo "❌ Webhook not ready yet (curl exit code: $exit_code). Retrying in $SLEEP seconds..."
              sleep $SLEEP
            fi
            if [ $i -eq $ATTEMPTS ]; then
              echo "::error::Webhook did not become ready after $ATTEMPTS attempts."
              exit 1 # Fallamos el job si se agotan los intentos
            fi
          done
          set -e
          echo "Ingress Controller checks completed."
          
          kubectl apply -f ingress/

          kubectl apply -f policies/

          echo "All Kubernetes manifests applied."